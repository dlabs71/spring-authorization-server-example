server:
  port: 7777

logging:
  level:
    root: DEBUG
    org.springframework.security.web.FilterChainProxy: ERROR
    logging.level.org.hibernate.SQL: INFO
    com.zaxxer.hikari: ERROR
    org.postgresql: ERROR

spring:
  application:
    name: j-sso
  session:
    timeout: 1800                 # Время жизни сессии (в секундах)
    redis:
      flush-mode: on_save         # Указываем, когда изменения сеанса записываются в хранилище (immediate или on_save)
      namespace: j-sso:session    # Пространство имен для ключей, используемых для хранения сессий.
      save-mode: on_set_attribute # Определяет в какой момент происходит сохранение изменений сессии (on_set_attribute, on_get_attribute, always)
  data:
    redis: # Настраиваем подключение к Redis
      client-type: lettuce        # Указываем тип клиента Redis (jedis или lettuce)
      database: 0                 # Указываем номер БД Redis
      host: localhost             # Хост подключения
      port: 6379                  # Порт подключения
      password: qwerty12345678    # Пароль подключения
      lettuce: # Настраиваем пул подключений клиента lettuce
        pool:
          max-active: 16          # Максимальное количество подключений в пуле
          max-idle: 8             # Минимальное количество "idle" подключений в пуле
  liquibase:
    enabled: false  # Указать true, если необходимо сделать накат скриптов БД при запуске приложения
    change-log: classpath:database/db.changelog.yaml
    contexts: prod, dev
  datasource:
    url: "jdbc:postgresql://localhost:5435/j-sso"
    username: "user"
    password: "user"
    driver-class-name: "org.postgresql.Driver"
    hikari:
      connection-timeout: 30000
      connection-test-query: select 1
      maximum-pool-size: 10
      minimum-idle: 10
      initialization-fail-timeout: 1
      leak-detection-threshold: 0
      pool-name: "HikariPool-j-sso"
      register-mbeans: true
  jpa:
    show-sql: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false
  security:
    oauth2:
      authorizationserver:
        issuer-url: http://localhost:7777
        introspection-endpoint: /oauth2/token-info
        authorization-ttl: 720000
        authorization-consent-ttl: 720000
      client:
        registration:
          github:
            clientId: <your_github_client_id>
            clientSecret: <your_github_client_secret>
          
          google:
            clientId: 608360869000-uldbg7l09a14ilafb9ufllhtkrql8t7q.apps.googleusercontent.com
            clientSecret: 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
            # Добавил эти scopes чтобы использовать именно OAuth2.
            # Иначе по умолчанию добавляется scope = openid и тогда взаимодействие идёт по протоколу OpenID Connect
            scope:
              - email
              - profile
          
          yandex:
            provider: yandex
            clientId: 4dad31d6d7fd4fe9b7c69b0fd5a83037
            clientSecret: 5555a5a414944cc5b4b9dfaefa2968a7
            redirect-uri: http://localhost:7777/login/oauth2/code/yandex
            authorizationGrantType: authorization_code
            clientName: Yandex
        
        provider:
          yandex:
            authorization-uri: https://oauth.yandex.ru/authorize
            token-uri: https://oauth.yandex.ru/token
            user-name-attribute: default_email
            userInfoUri: https://login.yandex.ru/info

yandex-avatar-url: https://avatars.yandex.net/get-yapic/{avatarId}/islands-retina-50

---
spring:
  config:
    activate:
      on-profile: production
  liquibase:
    contexts: prod

---
spring:
  config:
    activate:
      on-profile: development
  liquibase:
    contexts: prod, dev